/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthRouteRouteImport } from './pages/_auth/route'
import { Route as AppRouteRouteImport } from './pages/_app/route'
import { Route as AuthResetPasswordRouteImport } from './pages/_auth/reset-password'
import { Route as AuthRegisterRouteImport } from './pages/_auth/register'
import { Route as AuthLoginRouteImport } from './pages/_auth/login'
import { Route as AppProposalsRouteImport } from './pages/_app/proposals'
import { Route as AppHomeIndexRouteImport } from './pages/_app/_home/index'
import { Route as AuthPasswordResetRouteImport } from './pages/_auth/password/reset'
import { Route as AppUsersUserIdRouteImport } from './pages/_app/users/$userId'
import { Route as AppItemsIdRouteImport } from './pages/_app/items/$id'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppProposalsRoute = AppProposalsRouteImport.update({
  id: '/proposals',
  path: '/proposals',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppHomeIndexRoute = AppHomeIndexRouteImport.update({
  id: '/_home/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthPasswordResetRoute = AuthPasswordResetRouteImport.update({
  id: '/password/reset',
  path: '/password/reset',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppUsersUserIdRoute = AppUsersUserIdRouteImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppItemsIdRoute = AppItemsIdRouteImport.update({
  id: '/items/$id',
  path: '/items/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/proposals': typeof AppProposalsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/items/$id': typeof AppItemsIdRoute
  '/users/$userId': typeof AppUsersUserIdRoute
  '/password/reset': typeof AuthPasswordResetRoute
  '/': typeof AppHomeIndexRoute
}
export interface FileRoutesByTo {
  '/proposals': typeof AppProposalsRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/items/$id': typeof AppItemsIdRoute
  '/users/$userId': typeof AppUsersUserIdRoute
  '/password/reset': typeof AuthPasswordResetRoute
  '/': typeof AppHomeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_app/proposals': typeof AppProposalsRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_auth/reset-password': typeof AuthResetPasswordRoute
  '/_app/items/$id': typeof AppItemsIdRoute
  '/_app/users/$userId': typeof AppUsersUserIdRoute
  '/_auth/password/reset': typeof AuthPasswordResetRoute
  '/_app/_home/': typeof AppHomeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/proposals'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/items/$id'
    | '/users/$userId'
    | '/password/reset'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/proposals'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/items/$id'
    | '/users/$userId'
    | '/password/reset'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/proposals'
    | '/_auth/login'
    | '/_auth/register'
    | '/_auth/reset-password'
    | '/_app/items/$id'
    | '/_app/users/$userId'
    | '/_auth/password/reset'
    | '/_app/_home/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/reset-password': {
      id: '/_auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/proposals': {
      id: '/_app/proposals'
      path: '/proposals'
      fullPath: '/proposals'
      preLoaderRoute: typeof AppProposalsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/_home/': {
      id: '/_app/_home/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppHomeIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_auth/password/reset': {
      id: '/_auth/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof AuthPasswordResetRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/users/$userId': {
      id: '/_app/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AppUsersUserIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/items/$id': {
      id: '/_app/items/$id'
      path: '/items/$id'
      fullPath: '/items/$id'
      preLoaderRoute: typeof AppItemsIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppProposalsRoute: typeof AppProposalsRoute
  AppItemsIdRoute: typeof AppItemsIdRoute
  AppUsersUserIdRoute: typeof AppUsersUserIdRoute
  AppHomeIndexRoute: typeof AppHomeIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppProposalsRoute: AppProposalsRoute,
  AppItemsIdRoute: AppItemsIdRoute,
  AppUsersUserIdRoute: AppUsersUserIdRoute,
  AppHomeIndexRoute: AppHomeIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthPasswordResetRoute: typeof AuthPasswordResetRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthPasswordResetRoute: AuthPasswordResetRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
